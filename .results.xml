<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="3" name="pytest" skips="0" tests="5" time="0.567"><testcase classname="pytests.test_index" file="pytests/test_index.py" line="10" name="test_sentence" time="0.003652811050415039"><failure message="AssertionError: Remember we want to *captilize* this string in order to lower case all but the first character in this string
assert &apos;woW WE LOVE ... and strINGS!&apos; == &apos;Wow we love c... and strings!&apos;
  - woW WE LOVE cOdInG and strINGS!
  + Wow we love coding and strings!">def test_sentence():
        assert sentence is not None, &quot;The sentence variable must be assigned to a value!&quot;
        assert type(sentence) == type(&quot;&quot;), &quot;The sentence must be a string!&quot;
&gt;       assert sentence == &apos;Wow we love coding and strings!&apos;, &quot;Remember we want to *captilize* this string in order to lower case all but the first character in this string&quot;
E       AssertionError: Remember we want to *captilize* this string in order to lower case all but the first character in this string
E       assert &apos;woW WE LOVE ... and strINGS!&apos; == &apos;Wow we love c... and strings!&apos;
E         - woW WE LOVE cOdInG and strINGS!
E         + Wow we love coding and strings!

pytests/test_index.py:14: AssertionError</failure></testcase><testcase classname="pytests.test_index" file="pytests/test_index.py" line="15" name="test_flatiron_mantra" time="0.0014832019805908203"><failure message="AssertionError: 
assert &apos;learn. love. code.&apos; == &apos;Learn. Love. Code.&apos;
  - learn. love. code.
  ? ^      ^     ^
  + Learn. Love. Code.
  ? ^      ^     ^">def test_flatiron_mantra():
        assert flatiron_mantra is not None, &quot;The flatiron_mantra variable must be assigned to a value!&quot;
        assert type(flatiron_mantra) == type(&quot;&quot;), &quot;The flatiron_mantra must be a string!&quot;
&gt;       assert flatiron_mantra == &quot;Learn. Love. Code.&quot;, &quot;&quot;
E       AssertionError: 
E       assert &apos;learn. love. code.&apos; == &apos;Learn. Love. Code.&apos;
E         - learn. love. code.
E         ? ^      ^     ^
E         + Learn. Love. Code.
E         ? ^      ^     ^

pytests/test_index.py:19: AssertionError</failure></testcase><testcase classname="pytests.test_index" file="pytests/test_index.py" line="20" name="test_num_to_string" time="0.0013654232025146484"><failure message="AssertionError: The num_to_string must be a string!
assert &lt;class &apos;int&apos;&gt; == &lt;class &apos;str&apos;&gt;
 +  where &lt;class &apos;int&apos;&gt; = type(1234)
 +  and   &lt;class &apos;str&apos;&gt; = type(&apos;&apos;)">def test_num_to_string():
        assert num_to_string is not None, &quot;The num_to_string variable must be assigned to a value!&quot;
&gt;       assert type(num_to_string) == type(&quot;&quot;), &quot;The num_to_string must be a string!&quot;
E       AssertionError: The num_to_string must be a string!
E       assert &lt;class &apos;int&apos;&gt; == &lt;class &apos;str&apos;&gt;
E        +  where &lt;class &apos;int&apos;&gt; = type(1234)
E        +  and   &lt;class &apos;str&apos;&gt; = type(&apos;&apos;)

pytests/test_index.py:23: AssertionError</failure></testcase><testcase classname="pytests.test_index" file="pytests/test_index.py" line="25" name="test_full_address" time="0.0006215572357177734"></testcase><testcase classname="pytests.test_index" file="pytests/test_index.py" line="31" name="test_conda_environment_activated" time="0.0017592906951904297"></testcase></testsuite>